# Generated by Django 3.0.3 on 2020-05-22 19:44

import account.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=False)),
                ('is_alumni', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CourseCompletion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateField(blank=True)),
                ('end', models.DateField(blank=True)),
                ('number_of_students', models.IntegerField(default=300)),
                ('number_of_graduates', models.IntegerField(default=0)),
                ('number_of_placed', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Course Periods',
                'ordering': ['-start'],
            },
        ),
        migrations.CreateModel(
            name='Alumni',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('department', models.CharField(choices=[('ND', '---'), ('CE', 'Civil Eng.'), ('CS', 'Computer Science Eng.'), ('EC', 'Electronics & Commu.'), ('EEE', 'Electrical and Electronics Eng.'), ('IT', 'Information Tech.'), ('ME', 'Mechanical Eng.'), ('MCA', 'Master of Computer App.')], max_length=3)),
                ('contact', models.CharField(default='', help_text=' your registerd phone number with university if availabe ,your number help us to auto verify your profile', max_length=10, validators=[django.core.validators.RegexValidator(message='10 digits only ', regex='^[0-9]{10}$')])),
                ('reg_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('verify_status', models.BooleanField(default=False)),
                ('batch', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='account.CourseCompletion')),
            ],
            options={
                'ordering': ['batch'],
            },
        ),
        migrations.CreateModel(
            name='AlumniProfile',
            fields=[
                ('alumni', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='account.Alumni')),
                ('profile_pic', models.ImageField(default='profile.png', help_text='Profile Picture', upload_to=account.models.user_directory_path)),
                ('bio', models.TextField(blank=True, default='ND', max_length=500)),
                ('work', models.CharField(blank=True, default='Student', help_text='eg:- Web Developer ,s/w Architect, s/m admin...etc', max_length=30)),
                ('organization', models.CharField(blank=True, default='ND', max_length=100)),
                ('linkedin', models.URLField(blank=True, default='https://www.linkedin.com/in/username/')),
                ('twitter', models.URLField(blank=True, default='https://twitter.com/username')),
                ('facebook', models.URLField(blank=True, default='https://facebook.com/username')),
                ('private', models.BooleanField(default=False, help_text='<b>Make Your Profile Private</b>')),
            ],
        ),
    ]
